// Generated by gencpp from file simulator/CellStatus.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_CELLSTATUS_H
#define SIMULATOR_MESSAGE_CELLSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator
{
template <class ContainerAllocator>
struct CellStatus_
{
  typedef CellStatus_<ContainerAllocator> Type;

  CellStatus_()
    : state()  {
      state.assign(0);
  }
  CellStatus_(const ContainerAllocator& _alloc)
    : state()  {
  (void)_alloc;
      state.assign(0);
  }



   typedef boost::array<uint8_t, 7>  _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::simulator::CellStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::CellStatus_<ContainerAllocator> const> ConstPtr;

}; // struct CellStatus_

typedef ::simulator::CellStatus_<std::allocator<void> > CellStatus;

typedef boost::shared_ptr< ::simulator::CellStatus > CellStatusPtr;
typedef boost::shared_ptr< ::simulator::CellStatus const> CellStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::CellStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::CellStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::CellStatus_<ContainerAllocator1> & lhs, const ::simulator::CellStatus_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::CellStatus_<ContainerAllocator1> & lhs, const ::simulator::CellStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::CellStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::CellStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::CellStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::CellStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::CellStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::CellStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::CellStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b348761cbcd7de3dc654adabb46b3289";
  }

  static const char* value(const ::simulator::CellStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb348761cbcd7de3dULL;
  static const uint64_t static_value2 = 0xc654adabb46b3289ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::CellStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/CellStatus";
  }

  static const char* value(const ::simulator::CellStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::CellStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#bonus zone status\n"
"#uint8 UNOCCUPIED = 0\n"
"#uint8 BEING_OCCUPIED= 1\n"
"#uint8 OCCUPIED = 1\n"
"uint8[7] state\n"
"#occupied, cantMove, cantShoot, redHealth, blueHealth, redBullet, blueBullet \n"
"#uint8 red_bonus\n"
"#uint8 blue_bonus\n"
;
  }

  static const char* value(const ::simulator::CellStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::CellStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CellStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::CellStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::CellStatus_<ContainerAllocator>& v)
  {
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_CELLSTATUS_H
