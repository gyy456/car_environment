# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simulator/ReferSystemInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import simulator.msg
import std_msgs.msg

class ReferSystemInfo(genpy.Message):
  _md5sum = "ee73ee284e84f749605f3e3cde95753c"
  _type = "simulator/ReferSystemInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint64[4]       robotHealth
uint64[4]       remain_bullet
uint8[4]        robotShoot
float64[4]      robotShootDebuffTime
uint8[4]        robotMove
float64[4]      robotMoveDebuffTime
CellStatus[6]   cellState
uint64[6]       cellStateNumber
float64[6]      cellX
float64[6]      cellY
RobotPose[4]    robotPose
float64         gameTime

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: simulator/CellStatus
#bonus zone status
#uint8 UNOCCUPIED = 0
#uint8 BEING_OCCUPIED= 1
#uint8 OCCUPIED = 1
uint8[7] state
#occupied, cantMove, cantShoot, redHealth, blueHealth, redBullet, blueBullet 
#uint8 red_bonus
#uint8 blue_bonus

================================================================================
MSG: simulator/RobotPose
float32 x
float32 y
float32 yaw
"""
  __slots__ = ['header','robotHealth','remain_bullet','robotShoot','robotShootDebuffTime','robotMove','robotMoveDebuffTime','cellState','cellStateNumber','cellX','cellY','robotPose','gameTime']
  _slot_types = ['std_msgs/Header','uint64[4]','uint64[4]','uint8[4]','float64[4]','uint8[4]','float64[4]','simulator/CellStatus[6]','uint64[6]','float64[6]','float64[6]','simulator/RobotPose[4]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,robotHealth,remain_bullet,robotShoot,robotShootDebuffTime,robotMove,robotMoveDebuffTime,cellState,cellStateNumber,cellX,cellY,robotPose,gameTime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReferSystemInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robotHealth is None:
        self.robotHealth = [0] * 4
      if self.remain_bullet is None:
        self.remain_bullet = [0] * 4
      if self.robotShoot is None:
        self.robotShoot = b'\0'*4
      if self.robotShootDebuffTime is None:
        self.robotShootDebuffTime = [0.] * 4
      if self.robotMove is None:
        self.robotMove = b'\0'*4
      if self.robotMoveDebuffTime is None:
        self.robotMoveDebuffTime = [0.] * 4
      if self.cellState is None:
        self.cellState = [simulator.msg.CellStatus() for _ in range(6)]
      if self.cellStateNumber is None:
        self.cellStateNumber = [0] * 6
      if self.cellX is None:
        self.cellX = [0.] * 6
      if self.cellY is None:
        self.cellY = [0.] * 6
      if self.robotPose is None:
        self.robotPose = [simulator.msg.RobotPose() for _ in range(4)]
      if self.gameTime is None:
        self.gameTime = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.robotHealth = [0] * 4
      self.remain_bullet = [0] * 4
      self.robotShoot = b'\0'*4
      self.robotShootDebuffTime = [0.] * 4
      self.robotMove = b'\0'*4
      self.robotMoveDebuffTime = [0.] * 4
      self.cellState = [simulator.msg.CellStatus() for _ in range(6)]
      self.cellStateNumber = [0] * 6
      self.cellX = [0.] * 6
      self.cellY = [0.] * 6
      self.robotPose = [simulator.msg.RobotPose() for _ in range(4)]
      self.gameTime = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_4Q().pack(*self.robotHealth))
      buff.write(_get_struct_4Q().pack(*self.remain_bullet))
      _x = self.robotShoot
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      buff.write(_get_struct_4d().pack(*self.robotShootDebuffTime))
      _x = self.robotMove
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      buff.write(_get_struct_4d().pack(*self.robotMoveDebuffTime))
      if len(self.cellState) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.cellState), 'self.cellState')))
      for val1 in self.cellState:
        _x = val1.state
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_7B().pack(*_x))
        else:
          buff.write(_get_struct_7s().pack(_x))
      buff.write(_get_struct_6Q().pack(*self.cellStateNumber))
      buff.write(_get_struct_6d().pack(*self.cellX))
      buff.write(_get_struct_6d().pack(*self.cellY))
      if len(self.robotPose) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.robotPose), 'self.robotPose')))
      for val1 in self.robotPose:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.yaw))
      _x = self.gameTime
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cellState is None:
        self.cellState = None
      if self.robotPose is None:
        self.robotPose = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 32
      self.robotHealth = _get_struct_4Q().unpack(str[start:end])
      start = end
      end += 32
      self.remain_bullet = _get_struct_4Q().unpack(str[start:end])
      start = end
      end += 4
      self.robotShoot = str[start:end]
      start = end
      end += 32
      self.robotShootDebuffTime = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      self.robotMove = str[start:end]
      start = end
      end += 32
      self.robotMoveDebuffTime = _get_struct_4d().unpack(str[start:end])
      self.cellState = []
      for i in range(0, 6):
        val1 = simulator.msg.CellStatus()
        start = end
        end += 7
        val1.state = str[start:end]
        self.cellState.append(val1)
      start = end
      end += 48
      self.cellStateNumber = _get_struct_6Q().unpack(str[start:end])
      start = end
      end += 48
      self.cellX = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.cellY = _get_struct_6d().unpack(str[start:end])
      self.robotPose = []
      for i in range(0, 4):
        val1 = simulator.msg.RobotPose()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.yaw,) = _get_struct_3f().unpack(str[start:end])
        self.robotPose.append(val1)
      start = end
      end += 8
      (self.gameTime,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.robotHealth.tostring())
      buff.write(self.remain_bullet.tostring())
      _x = self.robotShoot
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      buff.write(self.robotShootDebuffTime.tostring())
      _x = self.robotMove
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      buff.write(self.robotMoveDebuffTime.tostring())
      if len(self.cellState) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.cellState), 'self.cellState')))
      for val1 in self.cellState:
        _x = val1.state
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_7B().pack(*_x))
        else:
          buff.write(_get_struct_7s().pack(_x))
      buff.write(self.cellStateNumber.tostring())
      buff.write(self.cellX.tostring())
      buff.write(self.cellY.tostring())
      if len(self.robotPose) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.robotPose), 'self.robotPose')))
      for val1 in self.robotPose:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.yaw))
      _x = self.gameTime
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cellState is None:
        self.cellState = None
      if self.robotPose is None:
        self.robotPose = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 32
      self.robotHealth = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=4)
      start = end
      end += 32
      self.remain_bullet = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=4)
      start = end
      end += 4
      self.robotShoot = str[start:end]
      start = end
      end += 32
      self.robotShootDebuffTime = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 4
      self.robotMove = str[start:end]
      start = end
      end += 32
      self.robotMoveDebuffTime = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      self.cellState = []
      for i in range(0, 6):
        val1 = simulator.msg.CellStatus()
        start = end
        end += 7
        val1.state = str[start:end]
        self.cellState.append(val1)
      start = end
      end += 48
      self.cellStateNumber = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=6)
      start = end
      end += 48
      self.cellX = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.cellY = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      self.robotPose = []
      for i in range(0, 4):
        val1 = simulator.msg.RobotPose()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.yaw,) = _get_struct_3f().unpack(str[start:end])
        self.robotPose.append(val1)
      start = end
      end += 8
      (self.gameTime,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4Q = None
def _get_struct_4Q():
    global _struct_4Q
    if _struct_4Q is None:
        _struct_4Q = struct.Struct("<4Q")
    return _struct_4Q
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4s = None
def _get_struct_4s():
    global _struct_4s
    if _struct_4s is None:
        _struct_4s = struct.Struct("<4s")
    return _struct_4s
_struct_6Q = None
def _get_struct_6Q():
    global _struct_6Q
    if _struct_6Q is None:
        _struct_6Q = struct.Struct("<6Q")
    return _struct_6Q
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
_struct_7s = None
def _get_struct_7s():
    global _struct_7s
    if _struct_7s is None:
        _struct_7s = struct.Struct("<7s")
    return _struct_7s
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
