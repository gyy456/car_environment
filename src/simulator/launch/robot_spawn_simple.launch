<launch>
  <arg name="robot_name"                default="simbot"/>
  <arg name="init_x"                    default="1"/>
  <arg name="init_y"                    default="2"/>
  <arg name="init_a"                    default="0"/>
  <arg name="ns"                        default="jackal0"/>
  <arg name="config"                    default="empty" />

  <param name="/$(arg ns)/robot_description"
         command="$(find description)/scripts/env_run
                  $(find description)/urdf/configs/$(arg config)
                  $(find xacro)/xacro '$(find description)/urdf/robot.urdf.xacro'
                  'namespace:=$(arg ns)'" />

  <!-- Spawn robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" ns="$(arg ns)"
        args="-x $(arg init_x) -y $(arg init_y) -z 0 -Y $(arg init_a)
        -urdf -model $(arg ns) -param /$(arg ns)/robot_description" />

  <!-- Publish the robot joints. -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" ns="$(arg ns)">
    <param name="tf_prefix"         value="$(arg ns)"/>
    <param name="robot_description" value="/$(arg ns)/robot_description"/>
  </node>

  <include file="$(find controller)/launch/control.launch">
    <arg name = "ns" value="$(arg ns)" />
  </include>


  <!-- New added， tf_prefix and robot_description are used to specify ns，error if without-->
  <!--node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" ns="$(arg ns)">
    <param name="tf_prefix"         value="$(arg ns)"/>
    <param name="robot_description" value="/$(arg ns)/robot_description"/>
  </node-->

  <!--include file="$(find controller)/launch/control.launch">
    <arg name = "ns" value="$(arg ns)" />
  </include-->

  <rosparam param="/$(arg ns)/gazebo_ros_control/pid_gains">
    front_left_wheel:
      p: 1
      i: 0.1
      d: 0
    front_right_wheel:
      p: 1
      i: 0.1
      d: 0
    rear_left_wheel:
      p: 1
      i: 0.1
      d: 0
    rear_right_wheel:
      p: 1
      i: 0.1
      d: 0
    front_camera_pivot_joint:
      p: 100
      i: 10.0
      d: 10.0
  </rosparam>

  <node name="turret_controller" pkg="simulator" type="turret_controller" ns="$(arg ns)">
    <remap from="/turret_position_controller/command"  to="$(arg ns)/turret_position_controller/command"/>
  </node>

  <rosparam command="load" file="$(find roborts_localization)/config/localization.yaml" ns="$(arg ns)"/>
    <param name="$(arg ns)/odom_frame"           value="/$(arg ns)/odom"/>
    <param name="$(arg ns)/base_frame"           value="/$(arg ns)/base_link"/>
    <param name="/$(arg ns)/initial_pose_a"      value="$(arg init_a)"/>
    <param name="/$(arg ns)/initial_pose_x"      value="$(arg init_x)"/>
    <param name="/$(arg ns)/initial_pose_y"      value="$(arg init_y)"/>

    <rosparam command="load" file="$(find roborts_localization)/amcl/config/amcl.yaml" ns="$(arg ns)"/>

  <!-- Run the localization node -->
    <node pkg="roborts_localization" type="localization_node" name="localization_node" respawn="false" output="screen" ns="$(arg ns)">
      <param name="laser_topic_name"    value="$(arg ns)/scan"/>
      <remap from="static_map"          to="/static_map"/>
    </node>

</launch>
